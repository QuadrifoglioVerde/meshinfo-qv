{% extends "templates/static/layout.html.j2" %}

{% block title %}{{ node.shortname }} | Node | MeshInfo{% endblock %}
{% block head %}
<script src="https://cdn.jsdelivr.net/npm/openlayers@4.6.5/dist/ol.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/openlayers@4.6.5/dist/ol.min.css" rel="stylesheet">
{% endblock %}

{% block content %}
<div class="container pt-3">
<div class="container">
  <p>
    <a href="nodes.html">Nodes</a> &gt; {{ node.shortname }}
  </p>
  <table>
    <tr>
      <td rowspan="2"><img src="https://api.dicebear.com/9.x/bottts-neutral/svg?seed={{ node.id }}" alt="Avatar"
          style="height: 50px;"></td>
      <td colspan="4">
        <h5>{{ node.shortname }} - {{ node.longname }}</h5>
      </td>
    </tr>
    <tr>
      {% if node.telemetry %}
      <td class="text-center">
        {% if node.telemetry.air_util_tx %}
        <span class="text-center" title="Air Util TX">
          <img src="images/icons/up.svg" alt="Air Util TX" style="height: 14px">
          {{ node.telemetry.air_util_tx | round(1) }}%
        </span>
        {% endif %}
      </td>
      <td class="text-center">
        {% if node.telemetry.channel_utilization %}
        <span class="text-center" title="Channel Util">
          <img src="images/icons/down.svg" alt="Channel Util" style="height: 14px">
          {{ node.telemetry.channel_utilization | round(1) }}%
        </span>
        {% endif %}
      </td>
      <td class="text-center">
        {% if node.telemetry.battery_level %}
        <span class="text-center" title="Battery Level">
          <img src="images/icons/battery.svg" alt="Battery" style="height: 20px">
          {{ node.telemetry.battery_level | round(0) }}%
        </span>
        {% endif %}
      </td>
      <td class="text-center">
        {% if node.telemetry.voltage %}
          <span class="text-center" title="Voltage">
            <img src="images/icons/voltage.svg" alt="Voltage" style="height: 14px">
            {% if node.telemetry.voltage is number %}
              {{ node.telemetry.voltage | round(1) }}V
            {% else %}
              {{ node.telemetry.voltage }}
            {% endif %}
          </span>
        {% endif %}
      </td>
      {% else %}
      <td colspan="4"></td>
      {% endif %}
    </tr>
  </table>
</div>
<div class="container">
  <div class="row">
    <div class="col-sm p-2">
      {% if node.position and node.position.latitude_i and node.position.longitude_i %}
      <div id="map" class="map"></div>
      {% endif %}
      <div class="w-100 mt-2 text-center fw-bold p-2" style="background: #D7F9FF;">Elsewhere</div>
      <div>
        <a href="https://meshview.zr1rf.za.net/packet_list/{{ utils.convert_node_id_from_hex_to_int(node.id) }}"
          target="_blank">Armooo's MeshView</a><br />
        <a href="https://app.bayme.sh/node/{{ node.id }}" target="_blank">Bay Mesh Explorer</a><br />
        <a href="https://meshtastic.liamcottle.net/?node_id={{ utils.convert_node_id_from_hex_to_int(node.id) }}"
          target="_blank">Liam's Map</a><br />
        <a href="https://meshmap.net/#{{ utils.convert_node_id_from_hex_to_int(node.id) }}" target="_blank">MeshMap</a>
      </div>
    </div>
    <div class="col-sm p-2">
      <table class="table table-sm">
        <thead>
          <tr>
            <th colspan="2" scope="col">Details</th>
          </tr>
        </thead>
        <tbody style="background: #F2F6F9;">
          <tr>
            <th scope="row" style="background: #F2F6F9; text-align: left;">ID (hex)</th>
            <td class="text-left">
              {{ node.id }}
            </td>
          </tr>
          <tr>
            <th scope="row" style="background: #F2F6F9; text-align: left;">ID (int)</th>
            <td class="text-left">
              {{ utils.convert_node_id_from_hex_to_int(node.id) }}
            </td>
          </tr>
          <tr>
            <th scope="row" style="background: #F2F6F9; text-align: left;">Hardware</th>
            <td class="text-left">
              {% if node.hardware %}
              {% if node.hardware in meshtastic_support.HardwareModel._value2member_map_ %}
              {% if meshtastic_support.HardwareModel(node.hardware) and meshtastic_support.HardwareModel(node.hardware)
              in
              meshtastic_support.HARDWARE_PHOTOS %}
              <img
                src="images/hardware/{{ meshtastic_support.HARDWARE_PHOTOS[meshtastic_support.HardwareModel(node.hardware)] }}"
                alt="{{ meshtastic_support.HardwareModel(node.hardware).name }}"
                title="{{ meshtastic_support.HardwareModel(node.hardware).name }}" class="rounded"
                style="max-height: 100px;">
              {% else %}
              {{ meshtastic_support.HardwareModel(node.hardware).name }}
              {% endif %}
              {% else %}
              {{ node.hardware }}
              {% endif %}
              {% else %}
              Unknown
              {% endif %}
            </td>
          </tr>
          <tr>
            <th scope="row" style="background: #F2F6F9; text-align: left;">Firmware version</th>
            <td class="text-left">
              {% if node.mapreport and 'firmware_version' in node.mapreport and node.mapreport.firmware_version %}
              {{ node.mapreport.firmware_version }}
              {% else %}
              Unknown
              {% endif %}
            </td>
          </tr>
          <tr>
            <th scope="row" style="background: #F2F6F9; text-align: left;">Role</th>
            <td class="text-left">
              {% if node.role is not none %}
              {% if node.role == 0 %}
              Client
              {% elif node.role == 1 %}
              Client Mute
              {% elif node.role == 2 %}
              Router
              {% elif node.role == 3 %}
              Router Client
              {% elif node.role == 4 %}
              Repeater
              {% elif node.role == 5 %}
              Tracker
              {% elif node.role == 6 %}
              Sensor
              {% elif node.role == 7 %}
              ATAK
              {% elif node.role == 8 %}
              Client Hidden
              {% elif node.role == 9 %}
              Lost and Found
              {% elif node.role == 10 %}
              ATAK Tracker
              {% else %}
              Unknown
              {% endif %}
              {% else %}
              Unknown
              {% endif %}
            </td>
          </tr>
          <tr>
            <th scope="row" style="background: #F2F6F9; text-align: left;">Position</th>
            <td class="text-left">
              {% if node.position and node.position.latitude_i and node.position.longitude_i %}
              {{ node.position.longitude_i / 1e7 }}, {{ node.position.latitude_i / 1e7 }}
              {% else %}
              Unknown
              {% endif %}
            </td>
          </tr>
          <tr>
            <th scope="row" style="background: #F2F6F9; text-align: left;">Location</th>
            <td class="text-left">
              {% if node.position and node.position.geocoded %}
              {{ node.position.geocoded.display_name }}
              {% else %}
              Unknown
              {% endif %}
            </td>
          </tr>
          <tr>
            <th scope="row" style="background: #F2F6F9; text-align: left;">Altitude</th>
            <td class="text-left">
              {% if node.position and node.position.altitude %}
              {{ node.position.altitude }} m
              {% else %}
              Unknown
              {% endif %}
            </td>
          </tr>
          <tr>
            <th scope="row" style="background: #F2F6F9; text-align: left;">Status</th>
            <td class="text-left">
              {% if node.active %}
              <span class="text-success">Online</span>
              {% else %}
              <span class="text-secondary">Offline</span>
              {% endif %}
            </td>
          </tr>
          <tr>
            <th scope="row" style="background: #F2F6F9; text-align: left;">Last Seen</th>
            <td class="text-left">
              {% if node.last_seen %}
              {{ node.last_seen }}
              {% else %}
              Unknown
              {% endif %}
            </td>
          </tr>
          <tr>
            <th scope="row" style="background: #F2F6F9; text-align: left;">Updated via</th>
            <td class="text-left">
              {% if node.updated_via %}
              {% if node.updated_via == node.id %}
              Self
              {% elif node.updated_via in nodes %}
              <a href='node_{{ nodes[node.updated_via]["id"] }}.html'>{{ nodes[node.updated_via]["longname"] }}</a>
              {% else %}
              {{ node.updated_via }}
              {% endif %}
              {% else %}
              Unknown
              {% endif %}
            </td>
          </tr>
        </tbody>
      </table>
      <table class="table table-striped table-sm">
        <thead>
          <tr>
            <th colspan="3" scope="col">Heard (zero hop)</th>
          </tr>
        </thead>
        <tbody>
          {% for neighbor in node.neighborinfo.neighbors %}
          {% set nid = utils.convert_node_id_from_int_to_hex(neighbor.node_id) %}
          {% set nnode = nodes[nid] if nid in nodes else None %}
          <tr>
            <td scope="col">
              {% if nnode %}
              <a href="node_{{ nnode.id }}.html">{{ nnode.shortname }}</a>
              {% else %}
              <span class="text-secondary">UNK</span>
              {% endif %}
            </td>
            <td scope="col">
              SNR: {{ neighbor.snr }}
            </td>
            <td scope="col">
              {% if nnode %}
              {% set dist = utils.calculate_distance_between_nodes(nnode, node) %}
              {% if dist %}
              {{ dist }} km
              {% endif %}
              {% endif %}
            </td>
          </tr>
          {% endfor %}
        </tbody>
      </table>
      <table class="table table-striped table-sm">
        <thead>
          <tr>
            <th colspan="3" scope="col">Heard By (zero hop)</th>
          </tr>
        </thead>
        <tbody>
          {% for id, nnode in nodes.items() %}
          {% if nnode.neighborinfo and nnode.neighborinfo.neighbors %}
          {% for neighbor in nnode.neighborinfo.neighbors %}
          {% if utils.convert_node_id_from_int_to_hex(neighbor.node_id) == node.id %}
          <tr>
            <td scope="col">
              {% if id in nodes %}
              <a href="node_{{ id }}.html">{{ nodes[id].shortname }}</a>
              {% else %}
              <span class="text-secondary">UNK</span>
              {% endif %}
            </td>
            <td scope="col">
              SNR: {{ neighbor.snr }}
            </td>
            <td scope="col">
              {% set dist = utils.calculate_distance_between_nodes(nodes[id], node) %}
              {% if dist %}
              {{ dist }} km
              {% endif %}
            </td>
          </tr>
          {% endif %}
          {% endfor %}
          {% endif %}
          {% endfor %}
        </tbody>
      </table>
    </div>
  </div>
</div>
<script type="module">
  var defaultStyle = new ol.style.Style({
    image: new ol.style.Circle({
      radius: 6,
      fill: new ol.style.Fill({
        color: 'rgba(0, 0, 240, 1)'
      }),
      stroke: new ol.style.Stroke({
        color: 'white',
        width: 2
      })
    })
  });

  var offlineStyle = new ol.style.Style({
    image: new ol.style.Circle({
      radius: 6,
      fill: new ol.style.Fill({
        color: 'rgba(0, 0, 0, 0.50)'
      }),
      stroke: new ol.style.Stroke({
        color: 'white',
        width: 2
      })
    })
  });

  var onlineStyle = new ol.style.Style({
    image: new ol.style.Circle({
      radius: 6,
      fill: new ol.style.Fill({
        color: 'rgba(50, 240, 50, 1)'
      }),
      stroke: new ol.style.Stroke({
        color: 'white',
        width: 2
      })
    })
  });

  var node = {
    id: '{{ node.id }}',
    shortname: '{{ node.shortname }}',
    longname: '{{ node.longname }}',
    last_seen: '{{ node.last_seen }}',
    position: {
      latitude: 38.575764,
      longitude: -121.478851
    },
    active: {{ node.active | tojson }},
    };

  {% if node.position and node.position.longitude_i and node.position.latitude_i %}
  node.position.latitude = {{ node.position.latitude_i / 1e7 }};
  node.position.longitude = {{ node.position.longitude_i / 1e7 }};
  {% endif %}

  {% if node.position and node.position.altitude %}
  node.position.altitude = {{ node.position.altitude }};
  {% endif %}

  {% if node.position and node.position.latitude_i and node.position.longitude_i %}
  const map = new ol.Map({
    layers: [
      new ol.layer.Tile({
        source: new ol.source.OSM(),
      }),
    ],
    target: 'map',
    view: new ol.View({
      center: ol.proj.fromLonLat([node.position.longitude, node.position.latitude]),
      zoom: 12,
    }),
  });

  var features = [];
  var feature = new ol.Feature({
    geometry: new ol.geom.Point(ol.proj.fromLonLat([node.position.longitude, node.position.latitude])),
    node: node,
  });
  if (node.active) {
    feature.setStyle(onlineStyle);
  } else {
    feature.setStyle(offlineStyle);
  }
  features.push(feature);

  const layer = new ol.layer.Vector({
    style: defaultStyle,
    source: new ol.source.Vector({
      features: features
    })
  });
  map.addLayer(layer);
  {% endif %}

</script>
<style>
  #map {
    height: 300px;
    width: 100%;
  }
</style>
</div>
{% endblock %}