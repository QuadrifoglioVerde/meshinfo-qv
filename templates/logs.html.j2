{% set this_page = "logs" %}
{% extends "layout.html.j2" %}

{% block title %}MQTT | MeshInfo{% endblock %}

{% block content %}
<style>
  @media (max-width: 768px) {
    #logs-table th:nth-child(3),
    #logs-table td:nth-child(3) {
      min-width: 300px;
      max-width: none;
      word-break: break-word;
    }
    .table-responsive {
      overflow-x: auto;
    }
  }
</style>
<div class="container pt-3">
  <h5>MQTT Zprávy</h5>
  <p class="mb-2">
    Posledních 100 zpráv přijatých přes MQTT. (Aktualizuje se po 15s)
  </p>
  <div class="table-responsive">
    <table class="table table-striped table-bordered" id="logs-table">
      <thead>
        <tr>
          <th scope="col" style="min-width:170px">Čas</th>
          <th scope="col">Topic</th>
          <th scope="col" style="word-wrap: break-word;max-width: 300px;">Data</th>
        </tr>
      </thead>
      <tbody id="logs-tbody">
        {% for message in logs %}
        <tr>
          <td>
            {% if message.ts_created %}
            {{ datetime.fromtimestamp(message.ts_created).strftime('%d.%m.%Y %H:%M:%S') }}
            {% endif %}
          </td>
          <td>
            {{ message.topic }}
          </td>
          <td style="word-break: break-all">{{ message.message }}</td>
        </tr>
        {% endfor %}
      </tbody>
    </table>
  </div>
</div>
<script>
function formatTimestamp(ts) {
  if (!ts) return '';
  const d = new Date(ts * 1000);
  const pad = n => n.toString().padStart(2, '0');
  return `${pad(d.getDate())}.${pad(d.getMonth() + 1)}.${d.getFullYear()} ${pad(d.getHours())}:${pad(d.getMinutes())}:${pad(d.getSeconds())}`;
}

async function fetchLogs() {
  try {
    const resp = await fetch('/api/logs');
    if (!resp.ok) return;
    const data = await resp.json();
    const tbody = document.getElementById('logs-tbody');
    if (!tbody) return;
    tbody.innerHTML = '';
    data.forEach(msg => {
      const tr = document.createElement('tr');
      const tdTime = document.createElement('td');
      tdTime.textContent = formatTimestamp(msg.ts_created);
      const tdTopic = document.createElement('td');
      tdTopic.textContent = msg.topic || '';
      const tdMsg = document.createElement('td');
      tdMsg.style.wordBreak = 'break-all';
      tdMsg.textContent = msg.message || '';
      tr.appendChild(tdTime);
      tr.appendChild(tdTopic);
      tr.appendChild(tdMsg);
      tbody.appendChild(tr);
    });
  } catch (e) {
    // ignore error
  }
}
setInterval(fetchLogs, 15000);
window.addEventListener('DOMContentLoaded', fetchLogs);
</script>
{% endblock %}